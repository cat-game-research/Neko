BEGIN_OPTIONS
	Stackable "True"
END_OPTIONS

BEGIN_PROPERTIES
	[Header(BAKED DETAIL)]
	[Toggle(_BAKEDDETAIL_ON)] _HasBakedDetail ("	Enabled", Float) = 0
	_BakedDetailFadeRange("	Fade Range", Float) = 1000.0
	_BakedDetailFadeBound("	Fade Bound", Float) = 1000.0
	_BakedDetailScaleR("	Strength R", Range(0,5)) = 1
	_BakedDetailScaleG("	Strength G", Range(0,5)) = 1
	_BakedDetailScaleB("	Strength B", Range(0,5)) = 1
	_BakedDetailScaleA("	Strength A", Range(0,5)) = 1
END_PROPERTIES

BEGIN_DEFINES
	#pragma shader_feature_local _BAKEDDETAIL_ON
END_DEFINES

BEGIN_CBUFFER
	float _BakedDetailFadeRange;
	float _BakedDetailFadeBound;
	float _BakedDetailScaleR;
	float _BakedDetailScaleG;
	float _BakedDetailScaleB;
	float _BakedDetailScaleA;
END_CBUFFER

BEGIN_BLACKBOARD
	float noiseA;
	float noiseB;
	float noiseC;
	float4 coordsA;
	float4 coordsB;
	float4 coordsC;
END_BLACKBOARD

BEGIN_CODE
	void SurfaceFunction(inout Surface o, inout ShaderData d)
	{
		#if __SGT_PLANET_BASE
			#if _BAKEDDETAIL_ON
				#if 0%STACKIDX% == 0
					float4 coords     = d.texcoord0 * _BakedDetailTilingAMul;
					float  max_height = _BakedDetailTilingA;
				#elif 0%STACKIDX% == 1
					float4 coords     = d.texcoord1;
					float  max_height = _BakedDetailTilingB;
				#elif 0%STACKIDX% == 2
					float4 coords     = d.texcoord2;
					float  max_height = _BakedDetailTilingC;
				#endif

				coords.x *= 2.0f;

				float polar = d.extraV2F0.x;
				float noise = (sample_noise(coords, polar) - 0.5f) * 5.0f;
				float fade  = saturate(d.blackboard.worldDistance / _BakedDetailFadeRange);

				fade *= saturate((_BakedDetailFadeBound - d.blackboard.worldDistance) / _BakedDetailFadeBound);

				coords *= 64.0f;

				#if 0%STACKIDX% == 0
					d.blackboard.noiseA  = noise;
					d.blackboard.coordsA = coords;
				#elif 0%STACKIDX% == 1
					d.blackboard.noiseB  = noise;
					d.blackboard.coordsB = coords;
				#elif 0%STACKIDX% == 2
					d.blackboard.noiseC  = noise;
					d.blackboard.coordsC = coords;
				#endif

				#if _DETAIL_ALBEDO
					#if _DETAIL_R
						ContributeDetailA(o, TEXTURE2D_ARGS(_AlbedoMapR, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.r * _BakedDetailScaleR * fade);
					#endif
					#if _DETAIL_G
						ContributeDetailA(o, TEXTURE2D_ARGS(_AlbedoMapG, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.g * _BakedDetailScaleG * fade);
					#endif
					#if _DETAIL_B
						ContributeDetailA(o, TEXTURE2D_ARGS(_AlbedoMapB, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.b * _BakedDetailScaleB * fade);
					#endif
					#if _DETAIL_A
						ContributeDetailA(o, TEXTURE2D_ARGS(_AlbedoMapA, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.a * _BakedDetailScaleA * fade);
					#endif
				#endif

				#if _DETAIL_NORMAL
					#if _DETAIL_R
						ContributeDetailN(o, TEXTURE2D_ARGS(_NormalMapR, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.r * _BakedDetailScaleR * fade);
					#endif
					#if _DETAIL_G
						ContributeDetailN(o, TEXTURE2D_ARGS(_NormalMapG, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.g * _BakedDetailScaleG * fade);
					#endif
					#if _DETAIL_B
						ContributeDetailN(o, TEXTURE2D_ARGS(_NormalMapB, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.b * _BakedDetailScaleB * fade);
					#endif
					#if _DETAIL_A
						ContributeDetailN(o, TEXTURE2D_ARGS(_NormalMapA, sampler_linear_repeat), coords, polar, max_height, noise, d.blackboard.detailMask.a * _BakedDetailScaleA * fade);
					#endif
				#endif
			#endif
		#endif
	}
END_CODE